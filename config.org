#+title: Configurações Emacs
#+author:GF

* Sobre o Emacs
** Para aprender

Uma interface agradável e confortável ajuda muito (é disso que estamos
cuidando)!

Acompanhar uma configuração do zero ajuda a descobrir algumas das
principais funcionalidades (olha a gente aqui de novo).

Customizações adicionais devem ser motivadas pelo surgimento de
necessidades que levem à busca de funcionalidades (e não o contrário).

O próprio Emacs é a melhor fonte de consulta, principalmente os
atalhos =M-x= (=execute-extended-command=) e =C-h k= (=describe-key=).

Mesmo usando o /evil mode/, é importante conhecer as [[https://codeberg.org/blau_araujo/emacs/src/branch/main/mapa.txt][teclas do Emacs]].

Acompanhe blogs e vlogs sobre Emacs: são excelentes formas de
descobrir possibilidades insuspeitas.

** Sistema de ajuda

Principais comandos de ajuda:

- =C-h f= :: Descrever /funções/.
- =C-h v= :: Descrever /variáveis/.
- =C-h o= :: Descrever tanto /funções/ quanto /variáveis/.
- =C-h k= :: Descrever associações de /teclas/.
- =C-h m= :: Ajuda sobre o /modo/ corrente.

#+begin_quote
Quando utilizados sobre símbolos de funções e variáveis, os comandos
=C-h k=, =C-h v=, =C-h f= e =C-h o= definirão esses nomes como termos
de busca padrão.
#+end_quote

* Preparação

- Instalar o Emacs
- Criar arquivo =~/.config/emacs/init.el=
- Criar arquivo =~/.config/emacs/config.org=

** Conteúdo de =init.el=

#+begin_exemple
(org-babel-load-file
 (expand-file-name "config.org" user-emacs-directory))  
#+end_exemple

* Configurações Gerais
** TODO Provisório (Remover)

#+begin_src emacs-lisp
;(load-theme 'modus-vivendi)
;(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Desabilitar tela de boas vindas(Scratch)

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

** Configuracao da interface

#+begin_src emacs-lisp
  (menu-bar-mode -1)     ;no menu bar
  (tool-bar-mode -1)     ;no tools bar
  (scroll-bar-mode -1)   ;no scroll bars
  (tooltip-mode -1)      ;no tooltips
  (set-fringe-mode 10)   ;frame edges set to 10px
  (column-number-mode 1) ;modeline shows column number
  (save-place-mode 1)    ;remember cursor position
  (recentf-mode 1)       ;remember recent files
  (savehist-mode 1)      ;remember history saving
#+end_src

** Numeração de linhas

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative) 
(global-display-line-numbers-mode)
(dolist (hook '(org-mode-hook
                vterm-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook)) 
  (add-hook hook (lambda () (display-line-numbers-mode -1)))) 
#+end_src

** Usar espaços em vez de tabulações

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)  
#+end_src

** Rolagem suavizada

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse 't
      scroll-step 1) 
#+end_src

** Deletar texto selecionado ao digitar

#+begin_src emacs-lisp
(delete-selection-mode t)  
#+end_src

** Destaque da linha corrente

#+begin_src emacs-lisp
(global-hl-line-mode 1) 
#+end_src

** Quebra de linha visual

#+begin_src emacs-lisp
(global-visual-line-mode t)  
#+end_src

** Carregar alterações externas

#+begin_src emacs-lisp
(global-auto-revert-mode t)  
#+end_src

** Prompt de confirmação

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)  ; Aks y/n instead of tes/no
#+end_src

** Habilita o fechamento de pares

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Sai do minibuffer com ESQ

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)  
#+end_src

** Desabilita C-z

#+begin_src emacs-lisp
;;(global-unset-key (kbd "C-z")) ;;Pode influenciar no evilmode
#+end_src

** Atalhos para zoom

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)  
(global-set-key (kbd "C--") 'text-scale-decrease)  
#+end_src

** Comentário em Italico
#+begin_src emacs-lisp
(set-face-attribute 'font-lock-comment-face nil :slant 'italic) 
#+end_src

* Sistema
** Backup

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))  
#+end_src

** Custom settings

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

* Fontes 

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "FiraCode Nerd Font 12") 
(set-face-attribute 'variable-pitch nil :font "FiraCode Nerd Font 12")
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font 12") 
#+end_src

* Funções
** Recarga das configurações

#+begin_src emacs-lisp
(defun blau/reaload-settings ()
  (interactive)
  (load-file "~/.config/emacs/init.el")) 
#+end_src

** Abrir config.org

#+begin_src emacs-lisp
(defun blau/open-emacs-config ()
  (interactive)
  (find-file "~/.config/emacs/config.org")) 
#+end_src

** Abrir diretório de configurações pessoais

#+begin_src emacs-lisp
  (defun blau/emacs-personal-files ()
    (interactive)
    (let ((default-directory "~/.config/emacs/"))
      (call-interactively 'find-file)))
#+end_src

* Gerenciamento de pacotes
** Configuração do package

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Configuração dos use-package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Pacotes
** Evil Mode

#+begin_src emacs-lisp
(use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-windows-right t
          evil-undo-system 'undo-redo)
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init)) 
#+end_src

** Keycast

#+begin_src emacs-lisp
(use-package keycast
  :init
  (add-to-list 'global-mode-string '("" mode-line-keycast))) 
#+end_src

** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

** Marginalia

Informações adicionais nas seleções.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-ligh nil))
    :init
    (marginalia-mode))
#+end_src

** Orderless

Busca /fuzzy/ no minibuffer.

#+begin_src emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))
#+end_src

** Consult

Funções úteis:

- =consult-grep=: Grep recursivo.
- =consult-find=: Busca recursiva de arquivos.
- =consult-outline=: Busca entre cabeçalhos (/outline/).
- =consult-line=: Busca entre as linhas do buffer.
- =consult-buffer=: Circula entre os buffers abertos.

#+begin_src emacs-lisp
  (use-package consult)
#+end_src

** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

** Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  ;; Sets the default theme to load!!! 
  (load-theme 'doom-moonlight t)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Doom Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook
  (after-init . doom-modeline-mode)
  :custom
  (set-face-attribute 'mode-line nil :font "FiraCode Nerd Font" :height 110) 
  (set-face-attribute 'mode-line-inactive nil :font "FiraCode Nerd Font" :height 110) 
  :config
  (setq doom-modeline-enable-word-count t))
#+end_src

** TODO Doom Dashboard

#+begin_src emacs-lisp
                                        ;(use-package dashboard
                                        ;  :init
                                        ;  (progn
                                        ;    (setq dashboard-items '((recents . 5)
                                        ;                            (projects . 5)))
                                        ;    (setq dashboard-show-shortcuts t)
                                        ;    (setq dashboard-center-content t)
                                        ;    (setq dashboard-set-file-icons t)
                                        ;    (setq dashboard-set-heading-icons t)
                                        ;    (setq dashboard-startup-banner "~/pic/emacs-typo-03.png"))
                                        ;  :config
                                        ;  (dashboard-setup-startup-hook))

#+end_src

** Diminish

#+begin_src emacs-lisp
(use-package diminish) 
(diminish 'visual-line-mode "")
(diminish 'eldoc-mode "")
(diminish 'flyspell-mode "Spell")
(diminish 'evil-collection-unimpaired-mode "")
#+end_src>

** Company

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)) 

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode)) 
#+end_src

** General (atalhos)

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer blau/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (blau/leader-keys
    "TAB TAB" '(comment-line :wk "Comment lines")) 

  ;; Buffer/bookmarks
  (blau/leader-keys
    "b" '(:ignore t :wk "Buffers/Bookmarks")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "q q" '(save-buffers-kill-terminal :wk "Quit emacs"))

  ;; Files
  (blau/leader-keys
    "f" '(:ignore t :wk "Files")
    "." '(find-file :wk "Find file")
    "f f" '(find-file :wk "Find file")
    "f p" '(blau/emacs-personal-files :wk "Open personal config files")
    "f c" '(blau/open-emacs-config :wk "Open emacs config.org"))

  ;; Helpers
  (blau/leader-keys
    "h" '(:ignore t :wk "Helpers")
    "h r r" '(blau/reaload-settings :wk "Reload emacs settings")))
#+end_src

** Rainbow Delimiters


#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode))) 
#+end_src

** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :hook (prog-mode-hook . flycheck-mode)) 
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config
  (projectile-mode))
#+end_src

** Linguagens

*** Markdown mode

Para usar o =pandoc= como comando, ele precisa estar instalado no sistema.

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+end_src

*** TODO Golang

#+begin_src emacs-lisp
;(require 'lsp-mode)
;(add-hook 'go-mode-hook #'lsp-deferred)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
;(defun lsp-go-install-save-hooks ()
;  (add-hook 'before-save-hook #'lsp-format-buffer t t)
;  (add-hook 'before-save-hook #'lsp-organize-imports t t))
;(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :bind
  (:map global-map
        ("M-\\" . treemacs))
  :config
  (setq treemacs-no-png-images t
        treemacs-is-never-other-window nil)) 
#+end_src

** Org Mode
*** Correção para fechamento de pares

Evita completar ~<>~ em org-mode para não atrapalhar os snippets de templates.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

*** Endentação de blocos

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0) ; Zera a margem dos blocos
(electric-indent-mode -1)                 ; Desliga a indentação automática
#+end_src

*** Templates de blocos

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

*** Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
:custom
(org-bullets-bullet-list '("▶" "▷" "◆" "◇" "▪" "▪" "▪"))) 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Visual Fill Column

#+begin_src emacs-lisp
(use-package visual-fill-column
  ;; Descomentar se quiser iniciar sempre com org mode centralizado.
  ;; :hook (org-mode . visual-fill-column-mode)
  :config
  (setq visual-fill-column-width 90)
  (setq-default visual-fill-column-center-text t))
 #+end_src

** Vterm

Dependências para compilar:

- ~cmake~
- ~libtool-bin~
- ~libvterm-dev~
  
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)) 
#+end_src


*** TODO Vterm Toggle

#+begin_src emacs-lisp
;(use-package vterm-toggle
;  :after vterm
;  :config
;  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
;  (setq vterm-toggle-fullscreen-p nil)
;  (setq vterm-toggle-scope 'project)
;  (add-to-list 'display-buffer-alist
;               '((lambda (buffer-or-name _)
;                   (let ((buffer (get-buffer buffer-or-name)))
;                     (with-current-buffer buffer
;                       (or (equal major-mode 'vterm-mode)
;                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
;                 (display-buffer-reuse-window display-buffer-at-bottom)
;                 (reusable-frames . visible)
;                 (window-height . 0.3))))
#+end_src
